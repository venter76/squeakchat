<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
   

    <title>Index</title>

    <style>
      ul {
        list-style: none;
      }
    
      
  .navbar-toggler-icon {
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba(255, 255, 255, 1)' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e");
  }

  .myLink {
    color: black;
    text-decoration: none;
}

.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0,0,0,0.7);
}
.modal-content {
  background-color: #fefefe;
    margin: auto;
    padding: 20px;
    width: 60%;
    background-color: #fff;
}
.close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
}
.close:hover, .close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
}




</style>
  
 


<link rel="manifest" href="manifest.json" />   
<meta name="theme-color" content="#008B8B">
</head>
  


<body class="bg-dark">

  <div class="container">
    <div class="row">
      <div class="col-md-10 col-10">
        <h3 class="text-center text-white">Your squeaks:</h3>
        
    </div>
    </div>
    <br>



 
<br>


<div class="row">
  <% messages.forEach(function(message) { %>
    <div class="col-12">
      <div class="<%= message.messageColour %>"> <!-- Add the messageColour class here -->
        <div class="card-body d-flex justify-content-between align-items-center">
          <div>
            <h5 class="card-title"><%= message.sender %></h5>
          </div>
          <div>
            <!-- Format the timestamp using toLocaleString -->
            <p class="card-text text-right"><%= message.timestamp.toLocaleString('en-ZA') %></p>
          </div>
        </div>
        <div class="card-body">
          <p class="card-text"><%= message.content %></p>
          <!-- You can add more card content here -->
          
          <!-- Add a form to handle the "Delete" action -->
          <form action="/messagedelete" method="POST">
            <input type="hidden" name="messageId" value="<%= message._id %>">
            <button type="submit" class="btn btn-secondary">Delete</button>
          </form>
        </div>
      </div>
    </div>
  <% }) %>
  <br>
</div>
<br>



<!-- Add the message input form card -->
<div class="row mt-4">
  <div class="col-12">
    <div class="card">
      <div class="card-body">
        <h5 class="card-title">Send a Message</h5>
        <!-- Toast notification -->
    <div id="toast">Some text here</div>
        <form action="/messagesend" method="post">
          <div class="form-group">
         
            <textarea class="form-control" id="messageContent" name="messageContent" rows="3"></textarea>
          </div>
          <br>
          <button type="submit" class="btn btn-primary">Send</button>
        </form>
        <button id="unsubscribeButton">Unsubscribe from Notifications</button>
        <button id="sendNotification">Send Notification</button>

      </div>
    </div>
  </div>
  
</div>
<br>
</div>
  
 

<script src="/unsub.js"></script>

  
<script>
  // Function to reload the page
  function reloadHomePage() {
    window.location.reload();
  }


  
  setInterval(reloadHomePage, 100000);
</script>



   
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz" crossorigin="anonymous">
        </script>


<script>
  // First, you register the service worker.
  if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('/service-worker.js')
      .then(function(registration) {
          console.log('Service Worker registered with scope:', registration.scope);

          // Store the registration object for later use (like subscribing to push)
          window.swRegistration = registration;
          
          // Check if the user is already subscribed
        return registration.pushManager.getSubscription();
    })
    .then(function(subscription) {
        if (subscription) {
            console.log('User is already subscribed:', subscription);
            // You can send the subscription to server again if needed or just log it
        } else {
            // User is not subscribed, call the subscribe function
            subscribeToPush();
        }
    })
    .catch(function(error) {
        console.error('Service Worker registration failed:', error);
    });
}

  // The function to subscribe to push
  function subscribeToPush() {
      const publicKey = 'BKUfJN99AJ9f7aG_cntY9HLc3Er3KjNfL9mR2MDn7iPJMphffD2psMYGfbTMegF3IhASG9K8pYtotkGTVWhW8Hk'; // This should be URL-safe base64 encoded
      const convertedVapidKey = urlBase64ToUint8Array(publicKey);

      swRegistration.pushManager.subscribe({
          userVisibleOnly: true,
          applicationServerKey: convertedVapidKey
      }).then(function(subscription) {
          console.log('User is subscribed:', subscription);
          return sendSubscriptionToServer(subscription);
      }).catch(function(error) {
          console.error('Failed to subscribe the user:', error);
      });
  }

  
// Helper function to convert your public VAPID key
function urlBase64ToUint8Array(base64String) {
    const padding = '='.repeat((4 - base64String.length % 4) % 4);
    const base64 = (base64String + padding)
        .replace(/-/g, '+')
        .replace(/_/g, '/');

    const rawData = window.atob(base64);
    const outputArray = new Uint8Array(rawData.length);

    for (let i = 0; i < rawData.length; ++i) {
        outputArray[i] = rawData.charCodeAt(i);
    }
    return outputArray;
}


function sendSubscriptionToServer(subscription) {
    return fetch('/api/save-subscription/', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(subscription)
    }).then(function(response) {
        if (!response.ok) {
            throw new Error('Bad status code from server.');
        }
        return response.json();
    }).then(function(responseData) {
      // Log the server response
      console.log("Server Response:", responseData);
      if (!responseData.success) {
            throw new Error('Bad response from server.');
        }
    });
}

  
</script>
<script>
  // Check if BroadcastChannel is supported
if ('BroadcastChannel' in self) {
    // Create a BroadcastChannel
    const broadcast = new BroadcastChannel('push-channel');

    // Listen for messages
    broadcast.onmessage = function(event) {
        // Update your UI here
        console.log('Received data from service worker:', event.data);

        // Display a toast notification
        showToast(event.data.title, event.data.body);
    };
}

function showToast(title, body) {
    // Assuming you have an element with the ID 'toast' in your HTML
    const toast = document.getElementById('toast');
    toast.textContent = `${title}: ${body}`;

    // Show the toast for a few seconds
    toast.classList.add('show');
    setTimeout(() => toast.classList.remove('show'), 3000);
}

</script>


<script>
  document.getElementById('sendNotification').addEventListener('click', function() {
    fetch('/api/send-notification/', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        if(data.success) {
            console.log("Notification sent successfully!");
        } else {
            console.error("Failed to send notification.");
        }
    })
    .catch(error => {
        console.error("There was an error sending the notification:", error);
    });
});

</script>

        
        <script src="https://cdn.jsdelivr.net/npm/jsqr@1.3.1/dist/jsQR.js"></script>

        
  
     

</body>

<footer class="sticky-footer bg-light">
  <div class="container-fluid">
    <div class="row justify-content-end">
      <div class="col-auto">
        <h6>Bray Road Solutions 2023</h6>
      </div>
    </div>
  </div>
</footer>


</html>